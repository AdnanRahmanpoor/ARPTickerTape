#define NOMINMAX
#include <windows.h>
#include "ConfigManager.h"
#include <fstream>
#include <sstream>
#include <algorithm>
#include <ShlObj.h>
#include <filesystem>

// Static member definitions
std::vector<std::wstring> ConfigManager::symbols;
int ConfigManager::refreshInterval = 60;
double ConfigManager::scrollSpeed = 2.0;
int ConfigManager::windowHeight = 30;
int ConfigManager::fontSize = 16;
std::wstring ConfigManager::fontName = L"Arial";
DWORD ConfigManager::textColor = 0x00FF00; // Green
DWORD ConfigManager::bgColor = 0x000000;   // Black
std::wstring ConfigManager::configPath;
std::wstring ConfigManager::colorScheme = L"Green";


std::wstring ConfigManager::GetConfigPath() {
    if (!configPath.empty()) {
        return configPath;
    }

    wchar_t* appDataPath = nullptr;
    if (SUCCEEDED(SHGetKnownFolderPath(FOLDERID_RoamingAppData, 0, nullptr, &appDataPath))) {
        configPath = std::wstring(appDataPath) + L"\\ARPTickerTape";

        // Create directory if it doesn't exist
        std::filesystem::create_directories(configPath);

        configPath += L"\\config.ini";
        CoTaskMemFree(appDataPath);
    }
    else {
        // Fallback to current directory
        configPath = L"config.ini";
    }

    return configPath;
}

std::wstring ConfigManager::Trim(const std::wstring& str) {
    size_t start = str.find_first_not_of(L" \t\r\n");
    if (start == std::wstring::npos) return L"";

    size_t end = str.find_last_not_of(L" \t\r\n");
    return str.substr(start, end - start + 1);
}

void ConfigManager::SetDefaults() {
    symbols.clear();
    symbols.push_back(L"AAPL");
    symbols.push_back(L"GOOGL");
    symbols.push_back(L"MSFT");
    symbols.push_back(L"TSLA");

    refreshInterval = 60;
    scrollSpeed = 2.0;
    windowHeight = 30;
    fontSize = 16;
    fontName = L"Arial";
    textColor = 0x00FF00; // Green
    bgColor = 0x000000;   // Black
    colorScheme = L"Green";
}

void ConfigManager::LoadConfig() {
    SetDefaults(); // Set defaults first

    std::wifstream file(GetConfigPath());
    if (!file.is_open()) {
        // Config file doesn't exist, create it with defaults
        SaveConfig();
        return;
    }

    std::wstring line;
    while (std::getline(file, line)) {
        line = Trim(line);
        if (line.empty() || line[0] == L'#' || line[0] == L';') {
            continue; // Skip empty lines and comments
        }

        size_t pos = line.find(L'=');
        if (pos == std::wstring::npos) continue;

        std::wstring key = Trim(line.substr(0, pos));
        std::wstring value = Trim(line.substr(pos + 1));

        if (key == L"symbols") {
            symbols.clear();
            std::wstringstream ss(value);
            std::wstring symbol;
            while (std::getline(ss, symbol, L',')) {
                symbol = Trim(symbol);
                if (!symbol.empty()) {
                    symbols.push_back(symbol);
                }
            }
        }
        else if (key == L"refreshInterval") {
            refreshInterval = std::max(1, _wtoi(value.c_str()));
        }
        else if (key == L"scrollSpeed") {
            scrollSpeed = std::max(0.1, _wtof(value.c_str()));
        }
        else if (key == L"windowHeight") {
            windowHeight = std::max(10, _wtoi(value.c_str()));
        }
        else if (key == L"fontSize") {
            fontSize = std::max(8, _wtoi(value.c_str()));
        }
        else if (key == L"fontName") {
            if (!value.empty()) {
                fontName = value;
            }
        }
        else if (key == L"textColor") {
            textColor = wcstoul(value.c_str(), nullptr, 16);
        }
        else if (key == L"bgColor") {
            bgColor = wcstoul(value.c_str(), nullptr, 16);
        }
        else if (key == L"colorScheme") {
            colorScheme = value;
        }
    }

    file.close();

    // Ensure we have at least one symbol
    if (symbols.empty()) {
        symbols.push_back(L"AAPL");
    }
}

void ConfigManager::SaveConfig() {
    std::wofstream file(GetConfigPath());
    if (!file.is_open()) {
        return; // Unable to save
    }

    file << L"# ARP Ticker Tape Configuration File\n";
    file << L"# This file is automatically generated. You can edit it manually if needed.\n\n";

    // Save symbols
    file << L"symbols=";
    for (size_t i = 0; i < symbols.size(); ++i) {
        if (i > 0) file << L",";
        file << symbols[i];
    }
    file << L"\n";

    // Save other settings
    file << L"refreshInterval=" << refreshInterval << L"\n";
    file << L"scrollSpeed=" << scrollSpeed << L"\n";
    file << L"windowHeight=" << windowHeight << L"\n";
    file << L"fontSize=" << fontSize << L"\n";
    file << L"fontName=" << fontName << L"\n";
    file << L"colorScheme=" << colorScheme << L"\n";

    // Save colors as hex
    file << L"textColor=" << std::hex << std::uppercase << textColor << L"\n";
    file << L"bgColor=" << std::hex << std::uppercase << bgColor << L"\n";

    file << L"\n# Color format: RRGGBB (hexadecimal)\n";
    file << L"# Example: FF0000 = Red, 00FF00 = Green, 0000FF = Blue\n";
    file << L"# Scroll speed: pixels per frame (typically 0.1 to 5.0)\n";
    file << L"# Refresh interval: seconds between API calls (minimum 1)\n";
    file << L"# Color scheme: Green, Red, Blue, Yellow, Cyan, Magenta, White\n";

    file.close();
}
